<template>
  <div>
    <style>
      .list {
        width: 800px;
        height: 50px;
        line-height: 50px;
        text-align: center;
        background: #ee8282;
        color: #fff;
        margin: 10px;
        border-radius: 3px;
        cursor: pointer;
      }
      .panner {
        width: 300px;
        height: 300px;
        background: #ddd;
      }
    </style>
    media
    <input value="盲点" id="musicName" @change='this.getMusic'/>
    <button @click="this.getMusic">getMusic</button>
    <button @click="this.pause">暂停</button>
    <button @click="this.start">开始</button>
    <button @click="this.stop">停止</button>
    <input id='progress' type='range' value='0' @input='this.changePitch'/>
    {{ currentTime }}
    <br />
    {{ duration }}
    <div className='list' v-for="val of songs" @click='this.play(val.id)'>{{val.name}}</div>
    <button @click='this.getEffect.bind(this, "snare")'>混响</button>
    <button @click='this.removeEffect'>去除混响</button>

    <div className='panner'>
      <button @keypress='this.enter'>panner</button>
      <button @click='() => this.Hearken.panner.setDefault()'>恢复原点</button>
    </div>
  </div>
</template>

<script>
  import Hearken from '../src'
  import pitchShift from 'pitch-shift'
  import ajax, { get } from '../demo/xhr'

  const times = [5, 5]
  export default class Root extends Grass.Component {
    // #temp
    constructor () {
      super()
      this.Hearken = new Hearken.Media({
        loop: true,
        // delay: 2,
        // rate: 1.5,
      })
      this.stream = null
      this.index = 0
      window.h = this.Hearken
      window.getEffect = this.getEffect
      this.createResponseState({
        duration: null,
        currentTime: 0,
        songs: [],
      })
    }

    beforeCreate () {
      this.pitch = window.p = new Hearken.Pitch(pitchShift, {
        frameSize: 2048,
        hopSize: 512,
        channel: 2
      })
      // this.Hearken.connect(this.pitch)
    }

    play = id => {
      return e => {
        fetch('http://localhost:3000/song/url?id=' + id)
        .then(res => res.json())
        .then(({data}) => {
          const url = data[0].url
          console.log(url);
          this.Hearken.ready(h => {
            h.fadeStart(3, url).then(r => console.log(r))
          })
        })
      }
    }

    pause = () => {
      if (this.Hearken) {
        this.Hearken.pause()
      }
    }

    start = () => {
      if (this.Hearken) {
        this.Hearken.start(this.stream, ...times)
      }
    }

    stop = () => {
      if (this.Hearken) {
        this.Hearken.stop()
      }
    }

    getEffect = name => {
      get('../resource/convoler/' + name + '.wav', buffer => {
        if (this.Hearken) {
          this.Hearken.convolver.appendBuffer(name, buffer).then(() => {
            this.Hearken.convolver.setStyle(name)
          })
        }
      })
    }

    getMusic = e => {
      const value = document.getElementById('musicName').value.trim()
      if (value) {
        // get('http://localhost:3000/getMusic?name=' + value, res => {
          
        // })
        console.log(value);
        this.Hearken.ready(() => {
          this.Hearken.start('http://localhost:3000/getMusic?name=' + value)
        })
        
        // fetch('http://localhost:3000/getMusic?name=' + value)
        // .then(res => res.json())
        // .then(({result}) => {
        //   console.log(result);
        //   this.state.songs = result.songs
        // })
      }
    }

    changePitch = e => {
      const value = e.target.value / 100
      this.pitch.value = value
    }

    removeEffect = () => {
      this.Hearken.convolver.clean()
    }

    enter = e => {
      const code = e.keyCode
      const panner = this.Hearken.panner
      const { x, y, z } = panner.pannerPosition
      console.log(code);
      if (code === 119) {
        console.log('top');
        panner.setPosition(null, y + 0.1)
      } else if (code === 115) {
        console.log('bottom');
        panner.setPosition(null, y - 0.1)
      } else if (code === 97) {
        console.log('left');
        panner.setPosition(x - 0.1)
      } else if (code === 100) {
        console.log('right');
        panner.setPosition(x + 0.1)
      } else if (code === 114) {
        console.log('forward');
        panner.setPosition(null, null, z - 0.1)
      } else if (code === 102) {
        console.log('back');
        panner.setPosition(null, null, z + 0.1)
      }
      console.log(panner.pannerPosition);
    }
  }

  Root.$mount(window.root)
</script>