<template>
  <div>
    <input value="永夜" id="musicName"/>
    <button @click="this.play.bind(this)">播放</button>
    <button @click="this.pause.bind(this)">暂停</button>
    <button @click="this.start.bind(this)">开始</button>
    <button @click="this.stop.bind(this)">停止</button>
    <button @click="this.getMusic.bind(this)">getMusic</button>
    <!-- <audio src="http://localhost:3000/getParticalMusic?name=永夜.mp3"></audio> -->
  </div>
</template>

<script>
  import Grass from '@rustle/grass'
  import Hearken from '../src'
  import ajax, { get } from '../test/xhr'

  const times = [5, 30]
  export default class Root extends Grass.Component {
    constructor () {
      super()
      this.Hearken = new Hearken.Media({ loop: true })
      this.stream = null
      this.index = 0
      window.h = this.Hearken
      window.getEffect = this.getEffect
    }

    play () {
      if (this.Hearken) {
        this.Hearken.play()
      }
    }

    pause () {
      if (this.Hearken) {
        this.Hearken.pause()
      }
    }

    start () {
      if (this.Hearken) {
        this.Hearken.start(this.stream, ...times)
      }
    }

    stop () {
      if (this.Hearken) {
        this.Hearken.stop()
      }
    }

    getEffect (name) {
      console.log();
      get('http://localhost:3000/getMusic?name=convoler/' + name, buffer => {
        const instance = window.h
        if (instance) {
          const style = name.split('.')[0]
          instance.convolver.appendBuffer(style, buffer).then(() => {
            instance.convolver.setStyle(style)
            console.log(style)
          })
        }
      })
    }

    getMusic () {
      this.index++
      const stream = this.stream = new Hearken.Stream('audio/mpeg')
      window.s = this.stream

      const name = this.index % 2 === 0
        ? 'airplanes'
        : '盲点'

      console.log(name);
      ajax('http://localhost:3000/getParticalMusic?name=' + name, (err, { response }, fn) => {
        if (err) throw err
        window.aa = response
        stream.append(response)
        fn()
      })

      ajax.end = () => stream.end()
      this.Hearken.start(stream, ...times).then(r => console.log(r))
      this.Hearken.on('playError', e => console.log(e))
    }
  }
</script>