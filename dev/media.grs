<template>
  <div>
    <style>
      .list {
        width: 800px;
        height: 50px;
        line-height: 50px;
        text-align: center;
        background: #ee8282;
        color: #fff;
        margin: 10px;
        border-radius: 3px;
        cursor: pointer;
      }
    </style>
    media
    <input value="凉凉 蒙面" id="musicName" @change='this.getMusic'/>
    <button @click="this.getMusic">getMusic</button>
    <button @click="this.pause">暂停</button>
    <button @click="this.start">开始</button>
    <button @click="this.stop">停止</button>
    <input id='progress' type='range' value=0 />
    <input @change='this.getEffect' />
    {{ currentTime }}
    <br />
    {{ duration }}
    <div className='list' v-for="val of songs" @click='this.play(val.id)'>{{val.name}}</div>
  </div>
</template>

<script>
  import Hearken from '../src'
  import pitchShift from 'pitch-shift'
  import ajax, { get } from '../demo/xhr'

  const times = [5, 5]
  export default class Root extends Grass.Component {
    // #temp
    constructor () {
      super()
      this.Hearken = new Hearken.Media({
        loop: true,
        delay: 2,
        rate: 1.5,
      })
      this.stream = null
      this.index = 0
      window.h = this.Hearken
      window.getEffect = this.getEffect
      this.createResponseState({
        duration: null,
        currentTime: 0,
        songs: [],
      })
    }

    beforeCreate () {
      this.pitch = window.p = new Hearken.Pitch(pitchShift, {
        frameSize: 2048,
        hopSize: 512,
        channel: 2
      })
      this.Hearken.connect(this.pitch)
    }

    play = id => {
      return e => {
        fetch('http://localhost:3000/song/url?id=' + id)
        .then(res => res.json())
        .then(({data}) => {
          const url = data[0].url
          console.log(url);
          this.Hearken.ready(h => {
            h.fadeStart(3, url).then(r => console.log(r))
          })
        })
      }
    }

    pause = () => {
      if (this.Hearken) {
        this.Hearken.pause()
      }
    }

    start = () => {
      if (this.Hearken) {
        this.Hearken.start(this.stream, ...times)
      }
    }

    stop = () => {
      if (this.Hearken) {
        this.Hearken.stop()
      }
    }

    getEffect = e => {
      const name = e.target.value.trim() 
      get('../resource/convoler/' + name + '.wav', buffer => {
        if (this.Hearken) {
          this.Hearken.convolver.appendBuffer(name, buffer).then(() => {
            this.Hearken.convolver.setStyle(name)
          })
        }
      })
    }

    getMusic = e => {
      const value = document.getElementById('musicName').value.trim()
      if (value) {
        fetch('http://localhost:3000/search?keywords=' + value)
        .then(res => res.json())
        .then(({result}) => {
          this.state.songs = result.songs
        })
      }
    }
  }

  Root.$mount(window.root)
</script>